Coverage Report by instance with details

=================================================================================
=== Instance: /RAM_top/ram_if
=== Design Unit: work.RAM_IF
=================================================================================
Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         62        62         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /RAM_top/ram_if --

                                              Node      1H->0L      0L->1H                          "Coverage"
                                              ---------------------------------------------------------------
                                               clk           1           1                              100.00 
                                          din[0-9]           1           1                              100.00 
                                         dout[0-7]           1           1                              100.00 
                                     dout_ref[0-7]           1           1                              100.00 
                                             rst_n           1           1                              100.00 
                                          rx_valid           1           1                              100.00 
                                          tx_valid           1           1                              100.00 
                                      tx_valid_ref           1           1                              100.00 

Total Node Count     =         31 
Toggled Node Count   =         31 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (62 of 62 bins)

=================================================================================
=== Instance: /RAM_top/DUT/SVA
=== Design Unit: work.RAM_sva
=================================================================================

Assertion Coverage:
    Assertions                       8         7         1    87.50%
--------------------------------------------------------------------
Name                 File(Line)                   Failure      Pass 
                                                  Count        Count
--------------------------------------------------------------------
/RAM_top/DUT/SVA/a_reset_txValid
                     RAM_sva.sv(23)                     0          1
/RAM_top/DUT/SVA/a_reset_dout
                     RAM_sva.sv(24)                     0          1
/RAM_top/DUT/SVA/a_wr_addr
                     RAM_sva.sv(26)                     0          1
/RAM_top/DUT/SVA/a_wr_data
                     RAM_sva.sv(27)                     0          1
/RAM_top/DUT/SVA/a_rd_addr
                     RAM_sva.sv(28)                     0          1
/RAM_top/DUT/SVA/a_rd_data
                     RAM_sva.sv(30)                    28          1
/RAM_top/DUT/SVA/a_wr_addr_to_wr_data
                     RAM_sva.sv(32)                     0          1
/RAM_top/DUT/SVA/a_rd_addr_to_rd_data
                     RAM_sva.sv(33)                     0          1
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         5         5         0   100.00%

================================Branch Details================================

Branch Coverage for instance /RAM_top/DUT/SVA

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RAM_sva.sv
------------------------------------CASE Branch------------------------------------
    12                                     16820     Count coming in to CASE
    13              1                       4167                 2'b00 : op = WRITE_ADDR;
    14              1                       4166                 2'b01 : op = WRITE_DATA;
    15              1                       4243                 2'b10 : op = READ_ADDR;
    16              1                       4243                 2'b11 : op = READ_DATA;
                                               1     All False Count
Branch totals: 5 hits of 5 branches = 100.00%



Directive Coverage:
    Directives                       8         8         0   100.00%

DIRECTIVE COVERAGE:
--------------------------------------------------------------------------------------------
Name                                     Design Design   Lang File(Line)      Hits Status    
                                         Unit   UnitType                                     
--------------------------------------------------------------------------------------------
/RAM_top/DUT/SVA/a_reset_txValid_cvr     RAM_sva Verilog  SVA  RAM_sva.sv(36)  2973 Covered   
/RAM_top/DUT/SVA/a_reset_dout_cvr        RAM_sva Verilog  SVA  RAM_sva.sv(37)  2973 Covered   
/RAM_top/DUT/SVA/a_wr_addr_cvr           RAM_sva Verilog  SVA  RAM_sva.sv(39)  6628 Covered   
/RAM_top/DUT/SVA/a_wr_data_cvr           RAM_sva Verilog  SVA  RAM_sva.sv(40)  5410 Covered   
/RAM_top/DUT/SVA/a_rd_addr_cvr           RAM_sva Verilog  SVA  RAM_sva.sv(41)  6555 Covered   
/RAM_top/DUT/SVA/a_rd_data_cvr           RAM_sva Verilog  SVA  RAM_sva.sv(43)  1089 Covered   
/RAM_top/DUT/SVA/a_wr_addr_to_wr_data_cvr 
                                         RAM_sva Verilog  SVA  RAM_sva.sv(45)  5267 Covered   
/RAM_top/DUT/SVA/a_rd_addr_to_rd_data_cvr 
                                         RAM_sva Verilog  SVA  RAM_sva.sv(46)  5375 Covered   
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       5         5         0   100.00%

================================Statement Details================================

Statement Coverage for instance /RAM_top/DUT/SVA --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RAM_sva.sv
    2                                                module RAM_sva(din,clk,rst_n,rx_valid,dout,tx_valid);
    3                                                    input      [9:0] din;
    4                                                    input            clk, rst_n, rx_valid;
    5                                                
    6                                                    input  [7:0] dout;
    7                                                    input       tx_valid;
    8                                                
    9                                                    op_e op;
    10                                               
    11              1                      16820         always_comb begin
    12                                                       case (din[9:8])
    13              1                       4167                 2'b00 : op = WRITE_ADDR;
    14              1                       4166                 2'b01 : op = WRITE_DATA;
    15              1                       4243                 2'b10 : op = READ_ADDR;
    16              1                       4243                 2'b11 : op = READ_DATA;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         48        48         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /RAM_top/DUT/SVA --

                                              Node      1H->0L      0L->1H                          "Coverage"
                                              ---------------------------------------------------------------
                                               clk           1           1                              100.00 
                                          din[0-9]           1           1                              100.00 
                                         dout[0-7]           1           1                              100.00 
                                                op               ENUM type       Value       Count 
                                                                WRITE_ADDR        2500      100.00 
                                                                WRITE_DATA        2502      100.00 
                                                                 READ_ADDR           1      100.00 
                                                                 READ_DATA           1      100.00 
                                             rst_n           1           1                              100.00 
                                          rx_valid           1           1                              100.00 
                                          tx_valid           1           1                              100.00 

Total Node Count     =         26 
Toggled Node Count   =         26 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (48 of 48 bins)

=================================================================================
=== Instance: /RAM_top/DUT
=== Design Unit: work.RAM
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         7         7         0   100.00%

================================Branch Details================================

Branch Coverage for instance /RAM_top/DUT

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RAM.v
------------------------------------IF Branch------------------------------------
    14                                     29998     Count coming in to IF
    14              1                       2973         if (~rst_n) begin
    21              1                      24382             if (rx_valid) begin
                                            2643     All False Count
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    22                                     24382     Count coming in to CASE
    23              1                       6665                     2'b00 : Wr_Addr <= din[7:0];
    24              1                       5425                     2'b01 : MEM[Wr_Addr] <= din[7:0];
    25              1                       6805                     2'b10 : Rd_Addr <= din[7:0];
    26              1                       5487                     2'b11 : dout <= MEM[Rd_Addr]; // read addr instead of write addr //M2
Branch totals: 4 hits of 4 branches = 100.00%


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      2         2         0   100.00%

================================Expression Details================================

Expression Coverage for instance /RAM_top/DUT --

  File RAM.v
----------------Focused Expression View-----------------
Line       29 Item    1  (din[9] && din[8])
Expression totals: 2 of 2 input terms covered = 100.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
      din[9]         Y
      din[8]         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  din[9]_0              -                             
  Row   2:          1  din[9]_1              din[8]                        
  Row   3:          1  din[8]_0              din[9]                        
  Row   4:          1  din[8]_1              din[9]                        


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      10        10         0   100.00%

================================Statement Details================================

Statement Coverage for instance /RAM_top/DUT --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RAM.v
    1                                                module RAM (din,clk,rst_n,rx_valid,dout,tx_valid);
    2                                                
    3                                                input      [9:0] din;
    4                                                input            clk, rst_n, rx_valid;
    5                                                
    6                                                output reg [7:0] dout;
    7                                                output reg       tx_valid;
    8                                                
    9                                                reg [7:0] MEM [255:0];
    10                                               
    11                                               reg [7:0] Rd_Addr, Wr_Addr;
    12                                               
    13              1                      29998     always @(posedge clk) begin
    14                                                   if (~rst_n) begin
    15              1                       2973             dout <= 0;
    16              1                       2973             tx_valid <= 0;
    17              1                       2973             Rd_Addr <= 0;
    18              1                       2973             Wr_Addr <= 0;
    19                                                   end
    20                                                   else                                    
    21                                                       if (rx_valid) begin
    22                                                           case (din[9:8])
    23              1                       6665                     2'b00 : Wr_Addr <= din[7:0];
    24              1                       5425                     2'b01 : MEM[Wr_Addr] <= din[7:0];
    25              1                       6805                     2'b10 : Rd_Addr <= din[7:0];
    26              1                       5487                     2'b11 : dout <= MEM[Rd_Addr]; // read addr instead of write addr //M2
    27                                                               default : dout <= 0;
    28                                                           endcase
    29              1                      24382                 tx_valid <= (din[9] && din[8])? 1'b1 : 1'b0; //Begin - end //M1

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         76        76         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /RAM_top/DUT --

                                              Node      1H->0L      0L->1H                          "Coverage"
                                              ---------------------------------------------------------------
                                      Rd_Addr[0-7]           1           1                              100.00 
                                      Wr_Addr[0-7]           1           1                              100.00 
                                               clk           1           1                              100.00 
                                          din[0-9]           1           1                              100.00 
                                         dout[0-7]           1           1                              100.00 
                                             rst_n           1           1                              100.00 
                                          rx_valid           1           1                              100.00 
                                          tx_valid           1           1                              100.00 

Total Node Count     =         38 
Toggled Node Count   =         38 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (76 of 76 bins)

=================================================================================
=== Instance: /RAM_top/GM
=== Design Unit: work.RAM_ref
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         8         8         0   100.00%

================================Branch Details================================

Branch Coverage for instance /RAM_top/GM

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RAM_ref.v
------------------------------------IF Branch------------------------------------
    15                                     29998     Count coming in to IF
    15              1                       2973         if(~rst_n) begin
    21              1                      27025         else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    22                                     27025     Count coming in to IF
    22              1                      24382             if(rx_valid) begin
                                            2643     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    23                                     24382     Count coming in to IF
    23              1                       6665                 if(rx_data[9:8] == 2'b00) begin
    27              1                       5425                 else if(rx_data[9:8] == 2'b01) begin 
    31              1                       6805                 else if(rx_data[9:8] == 2'b10) begin 
    35              1                       5487                 else begin 
Branch totals: 4 hits of 4 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       3         3         0   100.00%

================================Condition Details================================

Condition Coverage for instance /RAM_top/GM --

  File RAM_ref.v
----------------Focused Condition View-------------------
Line       23 Item    1  (rx_data[9:8] == 0)
Condition totals: 1 of 1 input term covered = 100.00%

           Input Term   Covered  Reason for no coverage   Hint
          -----------  --------  -----------------------  --------------
  (rx_data[9:8] == 0)         Y

     Rows:       Hits  FEC Target             Non-masking condition(s)      
 ---------  ---------  --------------------   -------------------------     
  Row   1:          1  (rx_data[9:8] == 0)_0  -                             
  Row   2:          1  (rx_data[9:8] == 0)_1  -                             

----------------Focused Condition View-------------------
Line       27 Item    1  (rx_data[9:8] == 1)
Condition totals: 1 of 1 input term covered = 100.00%

           Input Term   Covered  Reason for no coverage   Hint
          -----------  --------  -----------------------  --------------
  (rx_data[9:8] == 1)         Y

     Rows:       Hits  FEC Target             Non-masking condition(s)      
 ---------  ---------  --------------------   -------------------------     
  Row   1:          1  (rx_data[9:8] == 1)_0  -                             
  Row   2:          1  (rx_data[9:8] == 1)_1  -                             

----------------Focused Condition View-------------------
Line       31 Item    1  (rx_data[9:8] == 2)
Condition totals: 1 of 1 input term covered = 100.00%

           Input Term   Covered  Reason for no coverage   Hint
          -----------  --------  -----------------------  --------------
  (rx_data[9:8] == 2)         Y

     Rows:       Hits  FEC Target             Non-masking condition(s)      
 ---------  ---------  --------------------   -------------------------     
  Row   1:          1  (rx_data[9:8] == 2)_0  -                             
  Row   2:          1  (rx_data[9:8] == 2)_1  -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      13        13         0   100.00%

================================Statement Details================================

Statement Coverage for instance /RAM_top/GM --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RAM_ref.v
    1                                                module RAM_ref #(
    2                                                    parameter ADDR_SIZE = 8,
    3                                                    parameter MEM_DEPTH = 256
    4                                                ) (
    5                                                    input clk, rst_n, rx_valid,
    6                                                    input[9:0] rx_data,
    7                                                    output reg tx_valid,
    8                                                    output reg[7:0] tx_data
    9                                                );
    10                                               
    11                                               reg[ADDR_SIZE-1:0] mem [MEM_DEPTH-1:0];
    12                                               reg[ADDR_SIZE-1:0] wr_address, rd_address;
    13                                               
    14              1                      29998     always @(posedge clk) begin
    15                                                   if(~rst_n) begin
    16              1                       2973             tx_valid <= 0;
    17              1                       2973             tx_data <= 0;
    18              1                       2973             rd_address <= 0;
    19              1                       2973             wr_address <= 0;
    20                                                   end
    21                                                   else begin
    22                                                       if(rx_valid) begin
    23                                                           if(rx_data[9:8] == 2'b00) begin
    24              1                       6665                     wr_address <= rx_data[7:0];
    25              1                       6665                     tx_valid <= 0;
    26                                                           end
    27                                                           else if(rx_data[9:8] == 2'b01) begin 
    28              1                       5425                     mem[wr_address] <= rx_data[7:0];
    29              1                       5425                     tx_valid <= 0;
    30                                                           end
    31                                                           else if(rx_data[9:8] == 2'b10) begin 
    32              1                       6805                     rd_address <= rx_data[7:0];
    33              1                       6805                     tx_valid <= 0;
    34                                                           end
    35                                                           else begin 
    36              1                       5487                     tx_data <= mem[rd_address];
    37              1                       5487                     tx_valid <= 1;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         76        76         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /RAM_top/GM --

                                              Node      1H->0L      0L->1H                          "Coverage"
                                              ---------------------------------------------------------------
                                               clk           1           1                              100.00 
                                   rd_address[0-7]           1           1                              100.00 
                                             rst_n           1           1                              100.00 
                                      rx_data[0-9]           1           1                              100.00 
                                          rx_valid           1           1                              100.00 
                                      tx_data[0-7]           1           1                              100.00 
                                          tx_valid           1           1                              100.00 
                                   wr_address[0-7]           1           1                              100.00 

Total Node Count     =         38 
Toggled Node Count   =         38 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (76 of 76 bins)

=================================================================================
=== Instance: /RAM_top
=== Design Unit: work.RAM_top
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       5         5         0   100.00%

================================Statement Details================================

Statement Coverage for instance /RAM_top --
NOTE: The modification timestamp for source file 'RAM_top.sv' has been altered since compilation.

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RAM_top.sv
    4                                                module RAM_top;
    5                                                    logic clk = 0;
    6                                                    initial begin
    7               1                          1             $readmemb("mem.dat", DUT.MEM);
    7               2                      60003     
    7               3                      60002     
    8                                                        $readmemb("mem.dat", GM.mem);
    9                                                        forever #1 clk = ~clk;
    10                                                   end
    11                                                   RAM_IF ram_if (clk);
    12                                               
    13                                                   RAM DUT (
    14                                                       .clk(ram_if.clk),
    15                                                       .rst_n(ram_if.rst_n),
    16                                                       .rx_valid(ram_if.rx_valid),
    17                                                       .din(ram_if.din),
    18                                                       .tx_valid(ram_if.tx_valid),
    19                                                       .dout(ram_if.dout)
    20                                                   );
    21                                               
    22                                                   RAM_ref GM (
    23                                                       .clk(ram_if.clk),
    24                                                       .rst_n(ram_if.rst_n),
    25                                                       .rx_valid(ram_if.rx_valid),
    26                                                       .rx_data(ram_if.din),
    27                                                       .tx_valid(ram_if.tx_valid_ref),
    28                                                       .tx_data(ram_if.dout_ref)
    29                                                   );
    30                                               
    31                                                   bind DUT RAM_sva SVA (
    32                                                       .clk(ram_if.clk),
    33                                                       .rst_n(ram_if.rst_n),
    34                                                       .rx_valid(ram_if.rx_valid),
    35                                                       .din(ram_if.din),
    36                                                       .tx_valid(ram_if.tx_valid),
    37                                                       .dout(ram_if.dout)
    38                                                   );
    39              1                          1     
    40              1                          1         initial begin

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                          2         2         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /RAM_top --

                                              Node      1H->0L      0L->1H                          "Coverage"
                                              ---------------------------------------------------------------
                                               clk           1           1                              100.00 

Total Node Count     =          1 
Toggled Node Count   =          1 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (2 of 2 bins)

=================================================================================
=== Instance: /shared_pkg
=== Design Unit: work.shared_pkg
=================================================================================
Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                          4         2         2    50.00%

================================Toggle Details================================

Toggle Coverage for instance /shared_pkg --

                                              Node      1H->0L      0L->1H                          "Coverage"
                                              ---------------------------------------------------------------
                                       is_readOnly           1           1                              100.00 
                                        start_read           0           0                                0.00 

Total Node Count     =          2 
Toggled Node Count   =          1 
Untoggled Node Count =          1 

Toggle Coverage      =      50.00% (2 of 4 bins)

=================================================================================
=== Instance: /RAM_seq_item_pkg
=== Design Unit: work.RAM_seq_item_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        10         2         8    20.00%

================================Branch Details================================

Branch Coverage for instance /RAM_seq_item_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RAM_seq_item.sv
------------------------------------IF Branch------------------------------------
    6                                    ***0***     Count coming in to IF
    6               1                    ***0***             `uvm_object_utils(RAM_seq_item)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    6                                      30001     Count coming in to IF
    6               2                    ***0***             `uvm_object_utils(RAM_seq_item)
                                           30001     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    6                                    ***0***     Count coming in to IF
    6               3                    ***0***             `uvm_object_utils(RAM_seq_item)
    6               4                    ***0***             `uvm_object_utils(RAM_seq_item)
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    6                                      30001     Count coming in to IF
    6               5                    ***0***             `uvm_object_utils(RAM_seq_item)
                                           30001     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    6                                    ***0***     Count coming in to IF
    6               6                    ***0***             `uvm_object_utils(RAM_seq_item)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       2         0         2     0.00%

================================Condition Details================================

Condition Coverage for instance /RAM_seq_item_pkg --

  File RAM_seq_item.sv
----------------Focused Condition View-------------------
Line       6 Item    1  (name != 0)
Condition totals: 0 of 1 input term covered = 0.00%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
  (name != 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (name != 0)_0         -                             
  Row   2:    ***0***  (name != 0)_1         -                             

----------------Focused Condition View-------------------
Line       6 Item    2  (tmp_data__ != null)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (tmp_data__ != null)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:          1  (tmp_data__ != null)_0  -                             
  Row   2:    ***0***  (tmp_data__ != null)_1  -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      16         6        10    37.50%

================================Statement Details================================

Statement Coverage for instance /RAM_seq_item_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RAM_seq_item.sv
    1                                                package RAM_seq_item_pkg;
    2                                                    import uvm_pkg::*;
    3                                                    `include"uvm_macros.svh"
    4                                                    import shared_pkg::*;
    5                                                    class RAM_seq_item extends uvm_sequence_item;
    6               1                    ***0***             `uvm_object_utils(RAM_seq_item)
    6               2                    ***0***     
    6               3                    ***0***     
    6               4                    ***0***     
    6               5                    ***0***     
    6               6                      30001     
    6               7                    ***0***     
    6               8                    ***0***     
    6               9                      30001     
    6              10                    ***0***     
    7                                                    // Signals Delarations
    8                                                        rand logic      [9:0] din;
    9                                                        rand logic rst_n, rx_valid;
    10                                               
    11                                                       logic [7:0] dout;
    12                                                       logic       tx_valid;
    13                                                       logic [7:0] dout_ref;
    14                                                       logic       tx_valid_ref;
    15                                                       
    16              1                      90005             op_e wr_op[] = '{WRITE_ADDR, WRITE_DATA};
    17              1                      90005             op_e rd_op[] = '{READ_ADDR, READ_DATA};
    18                                               
    19                                                       bit wr_addr, wr_data, rd_addr, rd_data;
    20                                               
    21                                                       rand op_e op_rd_data, op_wr_data;
    22                                               
    23                                                       static op_e last_op;
    24                                                   // Functions 
    25                                                       function new(string name = "RAM_seq_item");
    26              1                      90005                 super.new(name);
    27                                                       endfunction
    28                                               
    29                                                       function string convert2string();
    30              1                    ***0***                 return $sformatf("%s - reset = %b, rx_valid = %b, din = %h ---- tx_valid = %b, dout = %h", super.convert2string, rst_n, rx_valid, din, tx_valid, dout);
    31                                                       endfunction
    32                                                       function string convert2string_stimulus();
    33              1                    ***0***                 return $sformatf("%s - reset = %b, rx_valid = %b, din = %h", super.convert2string, rst_n, rx_valid, din);
    34                                                       endfunction
    35                                                       function void post_randomize();
    36              1                      30000                 last_op = op_e'{din[9:8]};


=================================================================================
=== Instance: /RAM_coverage_pkg
=== Design Unit: work.RAM_coverage_pkg
=================================================================================

Covergroup Coverage:
    Covergroups                      1        na        na   100.00%
        Coverpoints/Crosses          5        na        na        na
            Covergroup Bins         16        16         0   100.00%
----------------------------------------------------------------------------------------------------------
Covergroup                                             Metric       Goal       Bins    Status               
                                                                                                         
----------------------------------------------------------------------------------------------------------
 TYPE /RAM_coverage_pkg/RAM_coverage/RAM_CVG          100.00%        100          -    Covered              
    covered/total bins:                                    16         16          -                      
    missing/total bins:                                     0         16          -                      
    % Hit:                                            100.00%        100          -                      
    Coverpoint rx_valid_cp                            100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
    Coverpoint tx_valid_cp                            100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
    Coverpoint operation_cp                           100.00%        100          -    Covered              
        covered/total bins:                                 7          7          -                      
        missing/total bins:                                 0          7          -                      
        % Hit:                                        100.00%        100          -                      
    Cross OP_rxValid_cross                            100.00%        100          -    Covered              
        covered/total bins:                                 4          4          -                      
        missing/total bins:                                 0          4          -                      
        % Hit:                                        100.00%        100          -                      
    Cross Read_OP_cross                               100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
 Covergroup instance \/RAM_coverage_pkg::RAM_coverage::RAM_CVG  
                                                      100.00%        100          -    Covered              
    covered/total bins:                                    16         16          -                      
    missing/total bins:                                     0         16          -                      
    % Hit:                                            100.00%        100          -                      
    Coverpoint rx_valid_cp                            100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        bin Bin_rxValid_High                            27030          1          -    Covered              
        bin Bin_rxValid_Low                              2971          1          -    Covered              
    Coverpoint tx_valid_cp                            100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        bin Bin_txValid_High                             5979          1          -    Covered              
        bin Bin_txValid_Low                             24022          1          -    Covered              
    Coverpoint operation_cp                           100.00%        100          -    Covered              
        covered/total bins:                                 7          7          -                      
        missing/total bins:                                 0          7          -                      
        % Hit:                                        100.00%        100          -                      
        bin Bin_Write_Addr                               8243          1          -    Covered              
        bin Bin_Write_Data                               6668          1          -    Covered              
        bin Bin_Read_Addr                                8336          1          -    Covered              
        bin Bin_Read_Data                                6754          1          -    Covered              
        bin Bin_Write_AddrToData                         4166          1          -    Covered              
        bin Bin_Read_AddrToData                          4243          1          -    Covered              
        bin Bin_Trans                                   14776          1          -    Covered              
    Cross OP_rxValid_cross                            100.00%        100          -    Covered              
        covered/total bins:                                 4          4          -                      
        missing/total bins:                                 0          4          -                      
        % Hit:                                        100.00%        100          -                      
        Auto, Default and User Defined Bins:
            bin Bin_Write_Addr_rxValidHigh               7379          1          -    Covered              
            bin Bin_Write_Data_rxValidHigh               6043          1          -    Covered              
            bin Bin_Read_Addr_rxValidHigh                7523          1          -    Covered              
            bin Bin_Read_Data_rxValidHigh                6085          1          -    Covered              
    Cross Read_OP_cross                               100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
        Auto, Default and User Defined Bins:
            bin Bin_out                                  5894          1          -    Covered              
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      14        12         2    85.71%

================================Statement Details================================

Statement Coverage for instance /RAM_coverage_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RAM_coverage.sv
    1                                                package RAM_coverage_pkg;
    2                                                    import uvm_pkg::*;
    3                                                    `include"uvm_macros.svh"
    4                                                
    5                                                    import RAM_seq_item_pkg::*;
    6                                                    import shared_pkg::*;
    7                                                    class RAM_coverage extends uvm_component;
    8               1                    ***0***             `uvm_component_utils(RAM_coverage)
    8               2                    ***0***     
    8               3                          2     
    9                                                        
    10                                                       uvm_analysis_export #(RAM_seq_item) cvg_axp;
    11                                                       uvm_tlm_analysis_fifo #(RAM_seq_item) cvg_fifo;
    12                                               
    13                                                       RAM_seq_item cvg_seq_item;
    14                                               //RAM_1 // RAM_2, RAM_3 //RAM_4, RAM_5 //RAM_6, RAM_7, RAM_8, RAM_9
    15                                                       covergroup RAM_CVG;
    16                                                           rx_valid_cp: coverpoint cvg_seq_item.rx_valid{
    17                                                               bins Bin_rxValid_High = {1'b1};
    18                                                               bins Bin_rxValid_Low = {1'b0};
    19                                                           }
    20                                                           tx_valid_cp: coverpoint cvg_seq_item.tx_valid{
    21                                                               bins Bin_txValid_High = {1'b1};
    22                                                               bins Bin_txValid_Low = {1'b0};
    23                                                           }
    24                                                          operation_cp: coverpoint cvg_seq_item.din[9:8]{
    25                                                               bins Bin_Write_Addr = {WRITE_ADDR};
    26                                                               bins Bin_Write_Data = {WRITE_DATA};
    27                                                               bins Bin_Read_Addr = {READ_ADDR};
    28                                                               bins Bin_Read_Data = {READ_DATA};
    29                                                               bins Bin_Write_AddrToData = (WRITE_ADDR=>WRITE_DATA);
    30                                                               bins Bin_Read_AddrToData = (READ_ADDR=>READ_DATA);
    31                                                               bins Bin_Trans = (0 => 1), (1 => 3), (1 => 0), (0 => 2),
    32                                                                                (2 => 3), (2 => 0), (3 => 1), (3 => 2);
    33                                                          }
    34                                               
    35                                                          OP_rxValid_cross: cross operation_cp, rx_valid_cp {
    36                                                               option.cross_auto_bin_max = 0;
    37                                                               bins Bin_Write_Addr_rxValidHigh  = binsof(operation_cp.Bin_Write_Addr) && binsof(rx_valid_cp.Bin_rxValid_High);
    38                                                               bins Bin_Write_Data_rxValidHigh  = binsof(operation_cp.Bin_Write_Data) && binsof(rx_valid_cp.Bin_rxValid_High);
    39                                                               bins Bin_Read_Addr_rxValidHigh   = binsof(operation_cp.Bin_Read_Addr) && binsof(rx_valid_cp.Bin_rxValid_High);
    40                                                               bins Bin_Read_Data_rxValidHigh   = binsof(operation_cp.Bin_Read_Data) && binsof(rx_valid_cp.Bin_rxValid_High);
    41                                                           }
    42                                                          Read_OP_cross: cross operation_cp,  tx_valid_cp {
    43                                                               option.cross_auto_bin_max = 0;
    44                                                               bins Bin_out = binsof(operation_cp) intersect {READ_DATA} && binsof(tx_valid_cp) intersect {1};
    45                                                          }
    46                                                       endgroup
    47                                                       function new (string name = "RAM_coverage", uvm_component parent = null);
    48              1                          1                 super.new(name, parent);
    49              1                          1                 RAM_CVG = new;
    50                                                       endfunction
    51                                               
    52                                                       function void build_phase (uvm_phase phase);
    53              1                          1                 super.build_phase(phase);
    54                                               
    55              1                          1                 cvg_axp = new ("cvg_axp", this);
    56              1                          1                 cvg_fifo = new ("cvg_fifo", this);
    57                                                       endfunction
    58                                               
    59                                                       function void connect_phase(uvm_phase phase);
    60              1                          1                 super.connect_phase(phase);
    61              1                          1                 cvg_axp.connect(cvg_fifo.analysis_export);
    62                                                       endfunction
    63                                               
    64                                                       task run_phase(uvm_phase phase);
    65              1                          1                 super.run_phase(phase);
    66              1                          1                 forever begin
    67              1                      30002                     cvg_fifo.get(cvg_seq_item);
    68              1                      30001                     RAM_CVG.sample();


=================================================================================
=== Instance: /RAM_scoreboard_pkg
=== Design Unit: work.RAM_scoreboard_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         8         3         5    37.50%

================================Branch Details================================

Branch Coverage for instance /RAM_scoreboard_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RAM_scoreboard.sv
------------------------------------IF Branch------------------------------------
    43                                     30001     Count coming in to IF
    43              1                    ***0***                     if (
    50              1                      30001                     else begin
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    48                                   ***0***     Count coming in to IF
    48              1                    ***0***                         `uvm_error("run_phase", $sformatf("Comparison Failed - Transaction Received DUT : %s, Ref Model : tx_valid = %b, dout = %h", sb_seq_item.convert2string, sb_seq_item.tx_valid_ref, sb_seq_item.dout_ref));
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    52                                     30001     Count coming in to IF
    52              1                    ***0***                         `uvm_info("run_phase", $sformatf("Correct RAM Comparison: %s", sb_seq_item.convert2string),UVM_HIGH);
                                           30001     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    59                                         1     Count coming in to IF
    59              1                          1                 `uvm_info("report_phase", $sformatf("Correct Tests = %d, Error Tests = %d", correct_cnt, error_cnt),UVM_MEDIUM)
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       2         0         2     0.00%

================================Condition Details================================

Condition Coverage for instance /RAM_scoreboard_pkg --

  File RAM_scoreboard.sv
----------------Focused Condition View-------------------
Line       44 Item    1  ((this.sb_seq_item.tx_valid_ref != this.sb_seq_item.tx_valid) || (this.sb_seq_item.dout_ref != this.sb_seq_item.dout))
Condition totals: 0 of 2 input terms covered = 0.00%

                                                    Input Term   Covered  Reason for no coverage   Hint
                                                   -----------  --------  -----------------------  --------------
  (this.sb_seq_item.tx_valid_ref != this.sb_seq_item.tx_valid)         N  '_1' not hit             Hit '_1'
          (this.sb_seq_item.dout_ref != this.sb_seq_item.dout)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target                                                      Non-masking condition(s)      
 ---------  ---------  --------------------                                            -------------------------     
  Row   1:          1  (this.sb_seq_item.tx_valid_ref != this.sb_seq_item.tx_valid)_0  ~(this.sb_seq_item.dout_ref != this.sb_seq_item.dout)
  Row   2:    ***0***  (this.sb_seq_item.tx_valid_ref != this.sb_seq_item.tx_valid)_1  -                             
  Row   3:          1  (this.sb_seq_item.dout_ref != this.sb_seq_item.dout)_0          ~(this.sb_seq_item.tx_valid_ref != this.sb_seq_item.tx_valid)
  Row   4:    ***0***  (this.sb_seq_item.dout_ref != this.sb_seq_item.dout)_1          ~(this.sb_seq_item.tx_valid_ref != this.sb_seq_item.tx_valid)


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      20        15         5    75.00%

================================Statement Details================================

Statement Coverage for instance /RAM_scoreboard_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RAM_scoreboard.sv
    1                                                package RAM_scoreboard_pkg;
    2                                                    import uvm_pkg::*;
    3                                                    `include"uvm_macros.svh"
    4                                                    import RAM_seq_item_pkg::*;
    5                                                    class RAM_scoreboard extends uvm_scoreboard;
    6               1                    ***0***             `uvm_component_utils(RAM_scoreboard)
    6               2                    ***0***     
    6               3                          2     
    7                                                
    8                                                        logic [7:0] dout_ref;
    9                                                        logic       tx_valid_ref;   
    10                                               
    11                                                       logic [7:0] Rd_Addr, Wr_Addr;
    12                                               
    13                                                       logic [7:0] MEM_ref [logic[7:0]];
    14                                               
    15                                                       uvm_analysis_export #(RAM_seq_item) sb_axp;
    16                                                       uvm_tlm_analysis_fifo #(RAM_seq_item) sb_fifo;
    17                                               
    18                                                       RAM_seq_item sb_seq_item;
    19                                               
    20              1                          1             int error_cnt = 0, correct_cnt = 0;
    20              2                          1     
    21                                               
    22                                                       function new (string name = "RAM_scoreboard", uvm_component parent = null);
    23              1                          1                 super.new(name, parent);
    24                                                       endfunction
    25                                               
    26                                                       function void build_phase(uvm_phase phase);
    27              1                          1                 super.build_phase(phase);
    28              1                          1                 sb_axp = new("sb_axp", this);
    29              1                          1                 sb_fifo = new("sb_fifo", this);
    30                                                       
    31                                                       endfunction
    32                                               
    33                                                       function void connect_phase(uvm_phase phase);
    34              1                          1                 super.connect_phase(phase);
    35              1                          1                 sb_axp.connect(sb_fifo.analysis_export);
    36                                                       endfunction
    37                                               
    38                                                       task run_phase(uvm_phase phase);
    39              1                          1                 super.run_phase(phase);
    40              1                          1                 forever begin
    41              1                      30002                     sb_fifo.get(sb_seq_item);
    42                                                               // ref_model(sb_seq_item);
    43                                                               if (
    44                                                                   sb_seq_item.tx_valid_ref != sb_seq_item.tx_valid ||
    45                                                                   sb_seq_item.dout_ref != sb_seq_item.dout
    46                                                               ) begin
    47              1                    ***0***                         error_cnt++;
    48              1                    ***0***                         `uvm_error("run_phase", $sformatf("Comparison Failed - Transaction Received DUT : %s, Ref Model : tx_valid = %b, dout = %h", sb_seq_item.convert2string, sb_seq_item.tx_valid_ref, sb_seq_item.dout_ref));
    49                                                               end
    50                                                               else begin
    51              1                      30001                         correct_cnt++;
    52              1                    ***0***                         `uvm_info("run_phase", $sformatf("Correct RAM Comparison: %s", sb_seq_item.convert2string),UVM_HIGH);
    53                                                               end
    54                                                           end
    55                                                       endtask
    56                                               
    57                                                       function void report_phase (uvm_phase phase);
    58              1                          1                 super.report_phase(phase);
    59              1                          1                 `uvm_info("report_phase", $sformatf("Correct Tests = %d, Error Tests = %d", correct_cnt, error_cnt),UVM_MEDIUM)


=================================================================================
=== Instance: /RAM_config_pkg
=== Design Unit: work.RAM_config_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        10         0        10     0.00%

================================Branch Details================================

Branch Coverage for instance /RAM_config_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RAM_config.sv
------------------------------------IF Branch------------------------------------
    5                                    ***0***     Count coming in to IF
    5               1                    ***0***             `uvm_object_utils(RAM_config) 
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    5                                    ***0***     Count coming in to IF
    5               2                    ***0***             `uvm_object_utils(RAM_config) 
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    5                                    ***0***     Count coming in to IF
    5               3                    ***0***             `uvm_object_utils(RAM_config) 
    5               4                    ***0***             `uvm_object_utils(RAM_config) 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    5                                    ***0***     Count coming in to IF
    5               5                    ***0***             `uvm_object_utils(RAM_config) 
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    5                                    ***0***     Count coming in to IF
    5               6                    ***0***             `uvm_object_utils(RAM_config) 
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       2         0         2     0.00%

================================Condition Details================================

Condition Coverage for instance /RAM_config_pkg --

  File RAM_config.sv
----------------Focused Condition View-------------------
Line       5 Item    1  (name != 0)
Condition totals: 0 of 1 input term covered = 0.00%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
  (name != 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (name != 0)_0         -                             
  Row   2:    ***0***  (name != 0)_1         -                             

----------------Focused Condition View-------------------
Line       5 Item    2  (tmp_data__ != null)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (tmp_data__ != null)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (tmp_data__ != null)_0  -                             
  Row   2:    ***0***  (tmp_data__ != null)_1  -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      11         1        10     9.09%

================================Statement Details================================

Statement Coverage for instance /RAM_config_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RAM_config.sv
    1                                                package RAM_config_pkg;
    2                                                    import uvm_pkg::*;
    3                                                    `include"uvm_macros.svh"
    4                                                    class RAM_config extends uvm_object;
    5               1                    ***0***             `uvm_object_utils(RAM_config) 
    5               2                    ***0***     
    5               3                    ***0***     
    5               4                    ***0***     
    5               5                    ***0***     
    5               6                    ***0***     
    5               7                    ***0***     
    5               8                    ***0***     
    5               9                    ***0***     
    5              10                    ***0***     
    6                                                
    7                                                        virtual RAM_IF ram_if;
    8                                                        uvm_active_passive_enum is_active;
    9                                                
    10                                                       function new(string name = "RAM_config");
    11              1                          1                 super.new(name);


=================================================================================
=== Instance: /RAM_driver_pkg
=== Design Unit: work.RAM_driver_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         2         1         1    50.00%

================================Branch Details================================

Branch Coverage for instance /RAM_driver_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RAM_driver.sv
------------------------------------IF Branch------------------------------------
    25                                     30001     Count coming in to IF
    25              1                    ***0***                     `uvm_info("run_phase", dvr_seq_item.convert2string_stimulus, UVM_HIGH);
                                           30001     All False Count
Branch totals: 1 hit of 2 branches = 50.00%


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      14        11         3    78.57%

================================Statement Details================================

Statement Coverage for instance /RAM_driver_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RAM_driver.sv
    1                                                package RAM_driver_pkg;
    2                                                    import uvm_pkg::*;
    3                                                    `include"uvm_macros.svh"
    4                                                    import RAM_seq_item_pkg::*;
    5                                                    class RAM_driver extends uvm_driver #(RAM_seq_item);
    6               1                    ***0***             `uvm_component_utils(RAM_driver)
    6               2                    ***0***     
    6               3                          2     
    7                                                
    8                                                        RAM_seq_item dvr_seq_item;
    9                                                        virtual RAM_IF ram_dvr_if;
    10                                                   
    11                                                       function new (string name = "RAM_driver", uvm_component parent = null);
    12              1                          1                 super.new(name, parent);
    13                                                       endfunction
    14                                               
    15                                                       task run_phase (uvm_phase phase);
    16              1                          1                 super.run_phase(phase);
    17              1                          1                 forever begin
    18              1                      30002                     dvr_seq_item = RAM_seq_item::type_id::create("dvr_seq_item");
    19              1                      30002                     seq_item_port.get_next_item(dvr_seq_item);
    20              1                      30001                     ram_dvr_if.rst_n = dvr_seq_item.rst_n;
    21              1                      30001                     ram_dvr_if.rx_valid = dvr_seq_item.rx_valid;
    22              1                      30001                     ram_dvr_if.din = dvr_seq_item.din;
    23              1                      30001                     repeat(1)@(negedge ram_dvr_if.clk);
    24              1                      30001                     seq_item_port.item_done();
    25              1                    ***0***                     `uvm_info("run_phase", dvr_seq_item.convert2string_stimulus, UVM_HIGH);


=================================================================================
=== Instance: /RAM_monitor_pkg
=== Design Unit: work.RAM_monitor_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         2         1         1    50.00%

================================Branch Details================================

Branch Coverage for instance /RAM_monitor_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RAM_monitor.sv
------------------------------------IF Branch------------------------------------
    35                                     30001     Count coming in to IF
    35              1                    ***0***                     `uvm_info("run_phase", mon_seq_item.convert2string, UVM_HIGH);
                                           30001     All False Count
Branch totals: 1 hit of 2 branches = 50.00%


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      19        16         3    84.21%

================================Statement Details================================

Statement Coverage for instance /RAM_monitor_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RAM_monitor.sv
    1                                                package RAM_monitor_pkg;
    2                                                    import uvm_pkg::*;
    3                                                    `include"uvm_macros.svh"
    4                                                    import RAM_seq_item_pkg::*;
    5                                                    class RAM_monitor extends uvm_monitor;
    6               1                    ***0***             `uvm_component_utils(RAM_monitor)
    6               2                    ***0***     
    6               3                          2     
    7                                                
    8                                                        virtual RAM_IF ram_mon_if;
    9                                                        RAM_seq_item mon_seq_item;
    10                                               
    11                                                       uvm_analysis_port #(RAM_seq_item) mon_ap;
    12                                               
    13                                                       function new (string name = "RAM_monitor", uvm_component parent = null);
    14              1                          1                 super.new(name, parent);
    15                                                       endfunction
    16                                               
    17                                                       function void build_phase (uvm_phase phase);
    18              1                          1                 super.build_phase(phase);
    19              1                          1                 mon_ap = new("mon_ap", this);
    20                                                       endfunction
    21                                               
    22                                                       task run_phase(uvm_phase phase);
    23              1                          1                 super.run_phase(phase);
    24              1                          1                 forever begin
    25              1                      30002                     mon_seq_item = RAM_seq_item::type_id::create("mon_seq_item");
    26              1                      30002                     repeat(1)@(negedge ram_mon_if.clk);
    27              1                      30001                     mon_seq_item.rst_n = ram_mon_if.rst_n;
    28              1                      30001                     mon_seq_item.rx_valid = ram_mon_if.rx_valid;
    29              1                      30001                     mon_seq_item.din = ram_mon_if.din;
    30              1                      30001                     mon_seq_item.dout = ram_mon_if.dout;
    31              1                      30001                     mon_seq_item.tx_valid = ram_mon_if.tx_valid;
    32              1                      30001                     mon_seq_item.dout_ref = ram_mon_if.dout_ref;
    33              1                      30001                     mon_seq_item.tx_valid_ref = ram_mon_if.tx_valid_ref;
    34              1                      30001                     mon_ap.write(mon_seq_item);
    35              1                    ***0***                     `uvm_info("run_phase", mon_seq_item.convert2string, UVM_HIGH);


=================================================================================
=== Instance: /RAM_sequencer_pkg
=== Design Unit: work.RAM_sequencer_pkg
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       4         2         2    50.00%

================================Statement Details================================

Statement Coverage for instance /RAM_sequencer_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RAM_sequencer.sv
    1                                                package RAM_sequencer_pkg;
    2                                                    import uvm_pkg::*;
    3                                                    `include"uvm_macros.svh"
    4                                                    import RAM_seq_item_pkg::*;
    5                                                    class RAM_sequencer extends uvm_sequencer #(RAM_seq_item);
    6               1                    ***0***             `uvm_component_utils(RAM_sequencer)
    6               2                    ***0***     
    6               3                          2     
    7                                                
    8                                                        function new (string name = "RAM_sequencer", uvm_component parent = null);
    9               1                          1                 super.new(name, parent);


=================================================================================
=== Instance: /RAM_agent_pkg
=== Design Unit: work.RAM_agent_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         8         3         5    37.50%

================================Branch Details================================

Branch Coverage for instance /RAM_agent_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RAM_agent.sv
------------------------------------IF Branch------------------------------------
    27                                         1     Count coming in to IF
    27              1                    ***0***                 if (!uvm_config_db #(RAM_config)::get(this,"","CFG_RAM",ram_cfg))
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    28                                   ***0***     Count coming in to IF
    28              1                    ***0***                     `uvm_fatal("build_phase", "Error - Agent cannot retrieve the config object");
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    32                                         1     Count coming in to IF
    32              1                          1                 if (ram_cfg.is_active == UVM_ACTIVE) begin
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    42                                         1     Count coming in to IF
    42              1                          1                 if(ram_cfg.is_active == UVM_ACTIVE) begin
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      15        12         3    80.00%

================================Statement Details================================

Statement Coverage for instance /RAM_agent_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RAM_agent.sv
    1                                                package RAM_agent_pkg;
    2                                                    import uvm_pkg::*;
    3                                                    `include"uvm_macros.svh"
    4                                                    import RAM_sequencer_pkg::*;
    5                                                    import RAM_monitor_pkg::*;
    6                                                    import RAM_driver_pkg::*;
    7                                                    import RAM_seq_item_pkg::*;
    8                                                    import RAM_config_pkg::*;
    9                                                    class RAM_agent extends uvm_agent;
    10              1                    ***0***             `uvm_component_utils(RAM_agent)
    10              2                    ***0***     
    10              3                          2     
    11                                               
    12                                                       RAM_config ram_cfg;
    13                                               
    14                                                       RAM_sequencer ram_sqr;
    15                                                       RAM_monitor ram_mon;
    16                                                       RAM_driver ram_dvr;
    17                                               
    18                                                       uvm_analysis_port #(RAM_seq_item) agt_ap;
    19                                               
    20                                                       function new (string name = "RAM_agent", uvm_component parent = null);
    21              1                          1                 super.new(name, parent);
    22                                                       endfunction
    23                                               
    24                                                       function void build_phase(uvm_phase phase);
    25              1                          1                 super.build_phase(phase);
    26                                               
    27                                                           if (!uvm_config_db #(RAM_config)::get(this,"","CFG_RAM",ram_cfg))
    28              1                    ***0***                     `uvm_fatal("build_phase", "Error - Agent cannot retrieve the config object");
    29                                               
    30              1                          1                 ram_mon = RAM_monitor::type_id::create("ram_mon", this);
    31                                               
    32                                                           if (ram_cfg.is_active == UVM_ACTIVE) begin
    33              1                          1                     ram_dvr = RAM_driver::type_id::create("ram_dvr", this);
    34              1                          1                     ram_sqr = RAM_sequencer::type_id::create("ram_sqr", this);
    35                                                           end
    36                                               
    37              1                          1                 agt_ap = new ("agt_ap", this);
    38                                                       endfunction
    39                                               
    40                                                       function void connect_phase (uvm_phase phase);
    41              1                          1                 super.connect_phase(phase);
    42                                                           if(ram_cfg.is_active == UVM_ACTIVE) begin
    43              1                          1                     ram_dvr.ram_dvr_if = ram_cfg.ram_if;
    44              1                          1                     ram_dvr.seq_item_port.connect(ram_sqr.seq_item_export);
    45                                                           end
    46              1                          1                 ram_mon.ram_mon_if = ram_cfg.ram_if;
    47              1                          1                 ram_mon.mon_ap.connect(agt_ap);


=================================================================================
=== Instance: /RAM_env_pkg
=== Design Unit: work.RAM_env_pkg
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      11         9         2    81.81%

================================Statement Details================================

Statement Coverage for instance /RAM_env_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RAM_env.sv
    1                                                package RAM_env_pkg;
    2                                                    import uvm_pkg::*;
    3                                                    `include"uvm_macros.svh"
    4                                                    import RAM_agent_pkg::*;
    5                                                    import RAM_scoreboard_pkg::*;
    6                                                    import RAM_coverage_pkg::*;
    7                                                    class RAM_env extends uvm_env;
    8               1                    ***0***             `uvm_component_utils(RAM_env)
    8               2                    ***0***     
    8               3                          2     
    9                                                
    10                                                       RAM_agent ram_agt;
    11                                                       RAM_scoreboard ram_sb;
    12                                                       RAM_coverage ram_cvg;
    13                                               
    14                                                       function new (string name = "RAM_env", uvm_component parent = null);
    15              1                          1                 super.new(name, parent);
    16                                                       endfunction
    17                                               
    18                                                       function void build_phase(uvm_phase phase);
    19              1                          1                 super.build_phase(phase);
    20              1                          1                 ram_agt = RAM_agent::type_id::create("ram_agt", this);
    21              1                          1                 ram_sb= RAM_scoreboard::type_id::create("ram_sb", this);
    22              1                          1                 ram_cvg = RAM_coverage::type_id::create("ram_cvg", this);
    23                                                       endfunction
    24                                               
    25                                                       function void connect_phase(uvm_phase phase);
    26              1                          1                 super.connect_phase(phase);
    27              1                          1                 ram_agt.agt_ap.connect(ram_sb.sb_axp);
    28              1                          1                 ram_agt.agt_ap.connect(ram_cvg.cvg_axp);


=================================================================================
=== Instance: /RAM_sequence_pkg
=== Design Unit: work.RAM_sequence_pkg
=================================================================================

Assertion Coverage:
    Assertions                       3         3         0   100.00%
--------------------------------------------------------------------
Name                 File(Line)                   Failure      Pass 
                                                  Count        Count
--------------------------------------------------------------------
/RAM_sequence_pkg/RAM_write_only_seq/body/#ublk#33852551#34/immed__39
                     RAM_sequence.sv(39)                0          1
/RAM_sequence_pkg/RAM_read_only_seq/body/#ublk#33852551#54/immed__59
                     RAM_sequence.sv(59)                0          1
/RAM_sequence_pkg/RAM_write_read_seq/body/#ublk#33852551#74/immed__79
                     RAM_sequence.sv(79)                0          1
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        40         8        32    20.00%

================================Branch Details================================

Branch Coverage for instance /RAM_sequence_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RAM_sequence.sv
------------------------------------IF Branch------------------------------------
    7                                    ***0***     Count coming in to IF
    7               1                    ***0***             `uvm_object_utils(RAM_reset_seq)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    7                                          1     Count coming in to IF
    7               2                    ***0***             `uvm_object_utils(RAM_reset_seq)
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    7                                    ***0***     Count coming in to IF
    7               3                    ***0***             `uvm_object_utils(RAM_reset_seq)
    7               4                    ***0***             `uvm_object_utils(RAM_reset_seq)
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    7                                          1     Count coming in to IF
    7               5                    ***0***             `uvm_object_utils(RAM_reset_seq)
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    7                                    ***0***     Count coming in to IF
    7               6                    ***0***             `uvm_object_utils(RAM_reset_seq)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    25                                   ***0***     Count coming in to IF
    25              1                    ***0***             `uvm_object_utils(RAM_write_only_seq)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    25                                         1     Count coming in to IF
    25              2                    ***0***             `uvm_object_utils(RAM_write_only_seq)
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    25                                   ***0***     Count coming in to IF
    25              3                    ***0***             `uvm_object_utils(RAM_write_only_seq)
    25              4                    ***0***             `uvm_object_utils(RAM_write_only_seq)
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    25                                         1     Count coming in to IF
    25              5                    ***0***             `uvm_object_utils(RAM_write_only_seq)
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    25                                   ***0***     Count coming in to IF
    25              6                    ***0***             `uvm_object_utils(RAM_write_only_seq)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    45                                   ***0***     Count coming in to IF
    45              1                    ***0***             `uvm_object_utils(RAM_read_only_seq)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    45                                         1     Count coming in to IF
    45              2                    ***0***             `uvm_object_utils(RAM_read_only_seq)
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    45                                   ***0***     Count coming in to IF
    45              3                    ***0***             `uvm_object_utils(RAM_read_only_seq)
    45              4                    ***0***             `uvm_object_utils(RAM_read_only_seq)
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    45                                         1     Count coming in to IF
    45              5                    ***0***             `uvm_object_utils(RAM_read_only_seq)
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    45                                   ***0***     Count coming in to IF
    45              6                    ***0***             `uvm_object_utils(RAM_read_only_seq)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    65                                   ***0***     Count coming in to IF
    65              1                    ***0***             `uvm_object_utils(RAM_write_read_seq)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    65                                         1     Count coming in to IF
    65              2                    ***0***             `uvm_object_utils(RAM_write_read_seq)
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    65                                   ***0***     Count coming in to IF
    65              3                    ***0***             `uvm_object_utils(RAM_write_read_seq)
    65              4                    ***0***             `uvm_object_utils(RAM_write_read_seq)
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    65                                         1     Count coming in to IF
    65              5                    ***0***             `uvm_object_utils(RAM_write_read_seq)
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    65                                   ***0***     Count coming in to IF
    65              6                    ***0***             `uvm_object_utils(RAM_write_read_seq)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       8         0         8     0.00%

================================Condition Details================================

Condition Coverage for instance /RAM_sequence_pkg --

  File RAM_sequence.sv
----------------Focused Condition View-------------------
Line       7 Item    1  (name != 0)
Condition totals: 0 of 1 input term covered = 0.00%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
  (name != 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (name != 0)_0         -                             
  Row   2:    ***0***  (name != 0)_1         -                             

----------------Focused Condition View-------------------
Line       7 Item    2  (tmp_data__ != null)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (tmp_data__ != null)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:          1  (tmp_data__ != null)_0  -                             
  Row   2:    ***0***  (tmp_data__ != null)_1  -                             

----------------Focused Condition View-------------------
Line       25 Item    1  (name != 0)
Condition totals: 0 of 1 input term covered = 0.00%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
  (name != 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (name != 0)_0         -                             
  Row   2:    ***0***  (name != 0)_1         -                             

----------------Focused Condition View-------------------
Line       25 Item    2  (tmp_data__ != null)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (tmp_data__ != null)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:          1  (tmp_data__ != null)_0  -                             
  Row   2:    ***0***  (tmp_data__ != null)_1  -                             

----------------Focused Condition View-------------------
Line       45 Item    1  (name != 0)
Condition totals: 0 of 1 input term covered = 0.00%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
  (name != 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (name != 0)_0         -                             
  Row   2:    ***0***  (name != 0)_1         -                             

----------------Focused Condition View-------------------
Line       45 Item    2  (tmp_data__ != null)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (tmp_data__ != null)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:          1  (tmp_data__ != null)_0  -                             
  Row   2:    ***0***  (tmp_data__ != null)_1  -                             

----------------Focused Condition View-------------------
Line       65 Item    1  (name != 0)
Condition totals: 0 of 1 input term covered = 0.00%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
  (name != 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (name != 0)_0         -                             
  Row   2:    ***0***  (name != 0)_1         -                             

----------------Focused Condition View-------------------
Line       65 Item    2  (tmp_data__ != null)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (tmp_data__ != null)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:          1  (tmp_data__ != null)_0  -                             
  Row   2:    ***0***  (tmp_data__ != null)_1  -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      68        36        32    52.94%

================================Statement Details================================

Statement Coverage for instance /RAM_sequence_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RAM_sequence.sv
    1                                                package RAM_sequence_pkg;
    2                                                    import uvm_pkg::*;
    3                                                    `include"uvm_macros.svh"
    4                                                    import shared_pkg::*;
    5                                                    import RAM_seq_item_pkg::*;
    6                                                    class RAM_reset_seq extends uvm_sequence #(RAM_seq_item);
    7               1                    ***0***             `uvm_object_utils(RAM_reset_seq)
    7               2                    ***0***     
    7               3                    ***0***     
    7               4                    ***0***     
    7               5                    ***0***     
    7               6                          1     
    7               7                    ***0***     
    7               8                    ***0***     
    7               9                          1     
    7              10                    ***0***     
    8                                                
    9                                                        RAM_seq_item ram_seq;
    10                                               
    11                                                       function new(string name = "RAM_reset_seq");
    12              1                          1                 super.new(name);    
    13                                                       endfunction
    14                                                   // RAM_1
    15                                                       virtual task body();
    16              1                          1                 ram_seq = RAM_seq_item::type_id::create("ram_seq");
    17              1                          1                 start_item(ram_seq);
    18              1                          1                 ram_seq.rst_n = 0;
    19              1                          1                 ram_seq.rx_valid = 0;
    20              1                          1                 ram_seq.din = 0;
    21              1                          1                 finish_item(ram_seq);
    22                                                       endtask
    23                                                   endclass
    24                                                   class RAM_write_only_seq extends uvm_sequence #(RAM_seq_item);
    25              1                    ***0***             `uvm_object_utils(RAM_write_only_seq)
    25              2                    ***0***     
    25              3                    ***0***     
    25              4                    ***0***     
    25              5                    ***0***     
    25              6                          1     
    25              7                    ***0***     
    25              8                    ***0***     
    25              9                          1     
    25             10                    ***0***     
    26                                               
    27                                                       RAM_seq_item ram_seq;
    28                                               
    29                                                       function new(string name = "RAM_write_only_seq");
    30              1                          1                 super.new(name);    
    31                                                       endfunction
    32                                               // RAM_2, RAM_3
    33                                                       virtual task body();
    34              1                      10000                 repeat(10000)begin
    35              1                      10000                     ram_seq = RAM_seq_item::type_id::create("ram_seq");
    36              1                      10000                     start_item(ram_seq);
    37              1                      10000                     ram_seq.read_only_const.constraint_mode(0);
    38              1                      10000                     ram_seq.write_read_const.constraint_mode(0);
    39                                                               assert(ram_seq.randomize);
    40              1                      10000                     finish_item(ram_seq);
    41                                                           end
    42                                                       endtask
    43                                                   endclass
    44                                                   class RAM_read_only_seq extends uvm_sequence #(RAM_seq_item);
    45              1                    ***0***             `uvm_object_utils(RAM_read_only_seq)
    45              2                    ***0***     
    45              3                    ***0***     
    45              4                    ***0***     
    45              5                    ***0***     
    45              6                          1     
    45              7                    ***0***     
    45              8                    ***0***     
    45              9                          1     
    45             10                    ***0***     
    46                                               
    47                                                       RAM_seq_item ram_seq;
    48                                               
    49                                                       function new(string name = "RAM_read_only_seq");
    50              1                          1                 super.new(name);    
    51                                                       endfunction
    52                                               //RAM_4, RAM_5
    53                                                       virtual task body();
    54              1                      10000                 repeat(10000)begin
    55              1                      10000                     ram_seq = RAM_seq_item::type_id::create("ram_seq");
    56              1                      10000                     start_item(ram_seq);
    57              1                      10000                     ram_seq.write_only_const.constraint_mode(0);
    58              1                      10000                     ram_seq.write_read_const.constraint_mode(0);
    59                                                               assert(ram_seq.randomize);
    60              1                      10000                     finish_item(ram_seq);
    61                                                           end
    62                                                       endtask
    63                                                   endclass
    64                                                   class RAM_write_read_seq extends uvm_sequence #(RAM_seq_item);
    65              1                    ***0***             `uvm_object_utils(RAM_write_read_seq)
    65              2                    ***0***     
    65              3                    ***0***     
    65              4                    ***0***     
    65              5                    ***0***     
    65              6                          1     
    65              7                    ***0***     
    65              8                    ***0***     
    65              9                          1     
    65             10                    ***0***     
    66                                               
    67                                                       RAM_seq_item ram_seq;
    68                                               
    69                                                       function new(string name = "RAM_write_read_seq");
    70              1                          1                 super.new(name);    
    71                                                       endfunction
    72                                               //RAM_6, RAM_7, RAM_8, RAM_9
    73                                                       virtual task body();
    74              1                      10000                 repeat(10000)begin
    75              1                      10000                     ram_seq = RAM_seq_item::type_id::create("ram_seq");
    76              1                      10000                     start_item(ram_seq);
    77              1                      10000                     ram_seq.write_only_const.constraint_mode(0);
    78              1                      10000                     ram_seq.read_only_const.constraint_mode(0);
    79                                                               assert(ram_seq.randomize);
    80              1                      10000                     finish_item(ram_seq);


=================================================================================
=== Instance: /RAM_test_pkg
=== Design Unit: work.RAM_test_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        20         9        11    45.00%

================================Branch Details================================

Branch Coverage for instance /RAM_test_pkg
NOTE: The modification timestamp for source file 'RAM_test.sv' has been altered since compilation.

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RAM_test.sv
------------------------------------IF Branch------------------------------------
    37                                         1     Count coming in to IF
    37              1                    ***0***                 if (!uvm_config_db #(virtual RAM_IF)::get(this,"","RAM_IF",ram_cfg.ram_if))
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    38                                   ***0***     Count coming in to IF
    38              1                    ***0***                     `uvm_fatal("build_phase", "Error - Test cannot retrieve the RAM interface");
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    47                                         1     Count coming in to IF
    47              1                          1                 `uvm_info("run_phase", "Reset Asserted", UVM_LOW);
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    49                                         1     Count coming in to IF
    49              1                          1                 `uvm_info("run_phase", "Reset Deasserted", UVM_LOW);
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    51                                         1     Count coming in to IF
    51              1                          1                 `uvm_info("run_phase", "Write Only Seq Started", UVM_LOW);
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    53                                         1     Count coming in to IF
    53              1                          1                 `uvm_info("run_phase", "Write Only Seq Ended", UVM_LOW);
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    55                                         1     Count coming in to IF
    55              1                          1                 `uvm_info("run_phase", "Read Only Seq Started", UVM_LOW);
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    59                                         1     Count coming in to IF
    59              1                          1                 `uvm_info("run_phase", "Read Only Seq Ended", UVM_LOW);
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    61                                         1     Count coming in to IF
    61              1                          1                 `uvm_info("run_phase", "Write Read Seq Started", UVM_LOW);
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    63                                         1     Count coming in to IF
    63              1                          1                 `uvm_info("run_phase", "Write Read Seq Ended", UVM_LOW);
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      31        28         3    90.32%

================================Statement Details================================

Statement Coverage for instance /RAM_test_pkg --
NOTE: The modification timestamp for source file 'RAM_test.sv' has been altered since compilation.

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RAM_test.sv
    1                                                package RAM_test_pkg;
    2                                                    import uvm_pkg::*;
    3                                                    `include"uvm_macros.svh"
    4                                                    import shared_pkg::*;
    5                                                    import RAM_config_pkg::*;
    6                                                    import RAM_sequence_pkg::*;
    7                                                    import RAM_seq_item_pkg::*;
    8                                                    import RAM_env_pkg::*;
    9                                                    class RAM_test extends uvm_test;
    10              1                    ***0***             `uvm_component_utils(RAM_test)
    10              2                    ***0***     
    10              3                          4     
    11                                               
    12                                                       RAM_env ram_env;
    13                                               
    14                                                       RAM_config ram_cfg;
    15                                               
    16                                                       RAM_reset_seq ram_reset;
    17                                                       RAM_write_only_seq ram_write_only;
    18                                                       RAM_read_only_seq ram_read_only;
    19                                                       RAM_write_read_seq ram_write_read;
    20                                               
    21                                                       function new (string name = "RAM_test", uvm_component parent = null);
    22              1                          1                 super.new(name, parent);
    23                                                       endfunction
    24                                               
    25                                                       
    26                                                       function void build_phase(uvm_phase phase);
    27              1                          1                 super.build_phase(phase);
    28              1                          1                 ram_cfg = RAM_config::type_id::create("ram_cfg", this);
    29              1                          1                 ram_env = RAM_env::type_id::create("ram_env",this);
    30                                               
    31              1                          1                 ram_reset = RAM_reset_seq::type_id::create("ram_reset");
    32              1                          1                 ram_write_only = RAM_write_only_seq::type_id::create("ram_write_only");
    33              1                          1                 ram_read_only = RAM_read_only_seq::type_id::create("ram_read_only");
    34              1                          1                 ram_write_read = RAM_write_read_seq::type_id::create("ram_write_read");
    35                                               
    36              1                          1                 ram_cfg.is_active = UVM_ACTIVE;
    37                                                           if (!uvm_config_db #(virtual RAM_IF)::get(this,"","RAM_IF",ram_cfg.ram_if))
    38              1                    ***0***                     `uvm_fatal("build_phase", "Error - Test cannot retrieve the RAM interface");
    39              1                          1                 uvm_config_db #(RAM_config)::set(this, "*", "CFG_RAM", ram_cfg);
    40                                               
    41                                                       endfunction
    42                                               
    43                                                       task run_phase(uvm_phase phase);
    44              1                          1                 super.run_phase(phase);
    45              1                          1                 phase.raise_objection(this);
    46                                                           //RAM_1
    47              1                          1                 `uvm_info("run_phase", "Reset Asserted", UVM_LOW);
    48              1                          1                 ram_reset.start(ram_env.ram_agt.ram_sqr);
    49              1                          1                 `uvm_info("run_phase", "Reset Deasserted", UVM_LOW);
    50                                                           // RAM_2, RAM_3
    51              1                          1                 `uvm_info("run_phase", "Write Only Seq Started", UVM_LOW);
    52              1                          1                 ram_write_only.start(ram_env.ram_agt.ram_sqr);
    53              1                          1                 `uvm_info("run_phase", "Write Only Seq Ended", UVM_LOW);
    54                                                           //RAM_4, RAM_5
    55              1                          1                 `uvm_info("run_phase", "Read Only Seq Started", UVM_LOW);
    56              1                          1                 is_readOnly = 1;
    57              1                          1                 ram_read_only.start(ram_env.ram_agt.ram_sqr);
    58              1                          1                 is_readOnly = 0;
    59              1                          1                 `uvm_info("run_phase", "Read Only Seq Ended", UVM_LOW);
    60                                                           //RAM_6, RAM_7, RAM_8, RAM_9
    61              1                          1                 `uvm_info("run_phase", "Write Read Seq Started", UVM_LOW);
    62              1                          1                 ram_write_read.start(ram_env.ram_agt.ram_sqr);
    63              1                          1                 `uvm_info("run_phase", "Write Read Seq Ended", UVM_LOW);
    64                                               
    65              1                          1                 phase.drop_objection(this);


COVERGROUP COVERAGE:
----------------------------------------------------------------------------------------------------------
Covergroup                                             Metric       Goal       Bins    Status               
                                                                                                         
----------------------------------------------------------------------------------------------------------
 TYPE /RAM_coverage_pkg/RAM_coverage/RAM_CVG          100.00%        100          -    Covered              
    covered/total bins:                                    16         16          -                      
    missing/total bins:                                     0         16          -                      
    % Hit:                                            100.00%        100          -                      
    Coverpoint rx_valid_cp                            100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
    Coverpoint tx_valid_cp                            100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
    Coverpoint operation_cp                           100.00%        100          -    Covered              
        covered/total bins:                                 7          7          -                      
        missing/total bins:                                 0          7          -                      
        % Hit:                                        100.00%        100          -                      
    Cross OP_rxValid_cross                            100.00%        100          -    Covered              
        covered/total bins:                                 4          4          -                      
        missing/total bins:                                 0          4          -                      
        % Hit:                                        100.00%        100          -                      
    Cross Read_OP_cross                               100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
 Covergroup instance \/RAM_coverage_pkg::RAM_coverage::RAM_CVG  
                                                      100.00%        100          -    Covered              
    covered/total bins:                                    16         16          -                      
    missing/total bins:                                     0         16          -                      
    % Hit:                                            100.00%        100          -                      
    Coverpoint rx_valid_cp                            100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        bin Bin_rxValid_High                            27030          1          -    Covered              
        bin Bin_rxValid_Low                              2971          1          -    Covered              
    Coverpoint tx_valid_cp                            100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        bin Bin_txValid_High                             5979          1          -    Covered              
        bin Bin_txValid_Low                             24022          1          -    Covered              
    Coverpoint operation_cp                           100.00%        100          -    Covered              
        covered/total bins:                                 7          7          -                      
        missing/total bins:                                 0          7          -                      
        % Hit:                                        100.00%        100          -                      
        bin Bin_Write_Addr                               8243          1          -    Covered              
        bin Bin_Write_Data                               6668          1          -    Covered              
        bin Bin_Read_Addr                                8336          1          -    Covered              
        bin Bin_Read_Data                                6754          1          -    Covered              
        bin Bin_Write_AddrToData                         4166          1          -    Covered              
        bin Bin_Read_AddrToData                          4243          1          -    Covered              
        bin Bin_Trans                                   14776          1          -    Covered              
    Cross OP_rxValid_cross                            100.00%        100          -    Covered              
        covered/total bins:                                 4          4          -                      
        missing/total bins:                                 0          4          -                      
        % Hit:                                        100.00%        100          -                      
        Auto, Default and User Defined Bins:
            bin Bin_Write_Addr_rxValidHigh               7379          1          -    Covered              
            bin Bin_Write_Data_rxValidHigh               6043          1          -    Covered              
            bin Bin_Read_Addr_rxValidHigh                7523          1          -    Covered              
            bin Bin_Read_Data_rxValidHigh                6085          1          -    Covered              
    Cross Read_OP_cross                               100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
        Auto, Default and User Defined Bins:
            bin Bin_out                                  5894          1          -    Covered              

TOTAL COVERGROUP COVERAGE: 100.00%  COVERGROUP TYPES: 1

DIRECTIVE COVERAGE:
--------------------------------------------------------------------------------------------
Name                                     Design Design   Lang File(Line)      Hits Status    
                                         Unit   UnitType                                     
--------------------------------------------------------------------------------------------
/RAM_top/DUT/SVA/a_reset_txValid_cvr     RAM_sva Verilog  SVA  RAM_sva.sv(36)  2973 Covered   
/RAM_top/DUT/SVA/a_reset_dout_cvr        RAM_sva Verilog  SVA  RAM_sva.sv(37)  2973 Covered   
/RAM_top/DUT/SVA/a_wr_addr_cvr           RAM_sva Verilog  SVA  RAM_sva.sv(39)  6628 Covered   
/RAM_top/DUT/SVA/a_wr_data_cvr           RAM_sva Verilog  SVA  RAM_sva.sv(40)  5410 Covered   
/RAM_top/DUT/SVA/a_rd_addr_cvr           RAM_sva Verilog  SVA  RAM_sva.sv(41)  6555 Covered   
/RAM_top/DUT/SVA/a_rd_data_cvr           RAM_sva Verilog  SVA  RAM_sva.sv(43)  1089 Covered   
/RAM_top/DUT/SVA/a_wr_addr_to_wr_data_cvr 
                                         RAM_sva Verilog  SVA  RAM_sva.sv(45)  5267 Covered   
/RAM_top/DUT/SVA/a_rd_addr_to_rd_data_cvr 
                                         RAM_sva Verilog  SVA  RAM_sva.sv(46)  5375 Covered   

TOTAL DIRECTIVE COVERAGE: 100.00%  COVERS: 8

ASSERTION RESULTS:
--------------------------------------------------------------------
Name                 File(Line)                   Failure      Pass 
                                                  Count        Count
--------------------------------------------------------------------
/RAM_top/DUT/SVA/a_reset_txValid
                     RAM_sva.sv(23)                     0          1
/RAM_top/DUT/SVA/a_reset_dout
                     RAM_sva.sv(24)                     0          1
/RAM_top/DUT/SVA/a_wr_addr
                     RAM_sva.sv(26)                     0          1
/RAM_top/DUT/SVA/a_wr_data
                     RAM_sva.sv(27)                     0          1
/RAM_top/DUT/SVA/a_rd_addr
                     RAM_sva.sv(28)                     0          1
/RAM_top/DUT/SVA/a_rd_data
                     RAM_sva.sv(30)                    28          1
/RAM_top/DUT/SVA/a_wr_addr_to_wr_data
                     RAM_sva.sv(32)                     0          1
/RAM_top/DUT/SVA/a_rd_addr_to_rd_data
                     RAM_sva.sv(33)                     0          1
/RAM_sequence_pkg/RAM_write_only_seq/body/#ublk#33852551#34/immed__39
                     RAM_sequence.sv(39)                0          1
/RAM_sequence_pkg/RAM_read_only_seq/body/#ublk#33852551#54/immed__59
                     RAM_sequence.sv(59)                0          1
/RAM_sequence_pkg/RAM_write_read_seq/body/#ublk#33852551#74/immed__79
                     RAM_sequence.sv(79)                0          1

Total Coverage By Instance (filtered view): 77.20%

